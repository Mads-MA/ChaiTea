#pragma once
#define DllExport   __declspec( dllexport )

#include "chai3d.h"


//Do not expose
bool HapticDevice_GetDevice(chai3d::cGenericHapticDevicePtr& devicePtr, int deviceIndex, bool allowVirtualDevice = false);
chai3d::cHapticDeviceInfo HapticDevice_GetInfo(int deviceIndex);

//Replaced cpp string with c string to allow marshalling
struct HapticDeviceInfo
{
	//! Haptic device model.
	chai3d::cHapticDeviceModel m_model;

	//! Name of the haptic device model.
	const char* m_modelName;

	//! Name of the haptic device manufacturer.
	const char* m_manufacturerName;

	//! Maximum continuous force in [N] that can be generated by the haptic device in translation.
	double m_maxLinearForce;

	//! Maximum continuous torque in [N*m] that can be generated by the haptic device in orientation.
	double m_maxAngularTorque;

	//! Maximum continuous force in [N] that can be produced by the haptic gripper.
	double m_maxGripperForce;

	//! Maximum closed loop linear stiffness [N/m] for a simulation running at 1 KHz.
	double m_maxLinearStiffness;

	//! Maximum closed loop angular stiffness [N*m/rad] for a simulation running at 1 KHz.
	double m_maxAngularStiffness;

	//! Maximum closed loop gripper stiffness [N/m] for a simulation running at 1 KHz.
	double m_maxGripperLinearStiffness;

	//! Maximum recommended linear damping factor Kv when using the getVelocity() method from the device class.
	double m_maxLinearDamping;

	//! Maximum recommended angular damping factor Kv when using the getAngularVelocity() method from the device class.
	double m_maxAngularDamping;

	//! Maximum recommended angular damping factor Kv when using the getGripperAngularVelocity() method from the device class.
	double m_maxGripperAngularDamping;

	//! Radius which describes the largest sphere (3D devices) or circle (2D Devices) which can be enclosed inside the physical workspace of the device.
	double m_workspaceRadius;

	//! Maximum open angle of the gripper [rad].
	double m_gripperMaxAngleRad;

	//! If __true__ then device supports position sensing (x,y,z axis), __false__ otherwise.
	bool m_sensedPosition;

	//! If __true__ then device supports rotation sensing. (i.e stylus, pen), __false__ otherwise.
	bool m_sensedRotation;

	//! If __true__ then device supports a sensed gripper interface, __false__ otherwise.
	bool m_sensedGripper;

	//! If __true__ then device provides actuation capabilities for translation degrees of freedom (x,y,z axis), __false__ otherwise.
	bool m_actuatedPosition;

	//! If __true__ then device provides actuation capabilities for orientation degrees of freedom (i.e stylus, wrist, pen), __false__ otherwise.
	bool m_actuatedRotation;

	//! If __true__ then device provides an actuated gripper, __false__ otherwise.
	bool m_actuatedGripper;

	//! If __true__ then the device can be used for left hands, __false__ otherwise.
	bool m_leftHand;

	//! If __true__ then the device can be used for right hands, __false__ otherwise.
	bool m_rightHand;
};

#ifdef __cplusplus
extern "C" {
#endif 


	//OLD

	HapticDeviceInfo HapticDevice_CreateInfo(chai3d::cHapticDeviceInfo info);

	//Open and close communication with device
	DllExport bool HapticDevice_Open(int deviceIndex);
	DllExport bool HapticDevice_Close(int deviceIndex);
	
	DllExport bool HapticDevice_SetEnableGripperUserSwitch(int deviceIndex, bool state);

	//Device specification
	DllExport double HapticDevice_MaxLinearForce(int deviceIndex);
	DllExport double HapticDevice_MaxStiffness(int deviceIndex, double workspaceScaleFactor);
	DllExport double HapticDevice_MaxDamping(int deviceIndex, double workspaceScaleFactor);

	DllExport HapticDeviceInfo HapticDevice_GetDeviceInfo(int deviceIndex);

#ifdef __cplusplus
}
#endif